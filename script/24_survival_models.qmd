---
title: ""
format:
  html:
    embed-resources: true
    page-layout: full
    grid:
      margin-width: 100px
author: Daniel Väisänen
editor: source
toc: true
execute:
  warning: false
  echo: true
  eval: false
---


```{r}
library(tidyverse)
library(tictoc)
library(survival)
library(flexsurv)
library(marginaleffects)

```




# data
```{r}
source(here::here("script", "01_data_source_file.R"))
```


```{r}
data_occ <- data_cvd |>
  filter(!is.na(ssyk_WBHL_group)) |>
  group_by(id_cluster) |>
  mutate(n_cluster = n()) |>
  ungroup() |>
  filter(n_cluster > 4)

data_mun <- data_cvd |>
  filter(
    !is.na(ssyk_WBHL_group),
    !is.na(KommunSize),
    !is.na(Place_of_origin)
  ) |>
  group_by(id_cluster) |>
  mutate(n_cluster = n()) |>
  ungroup() |>
  filter(n_cluster > 4)


```

# _______________________________________________________________________________

# COX

```{r}
fits_m <- list(
  m1 = coxph(
    Surv(risk_time_art_10yrs, risk_art_flag_10yrs) ~ treated + birth_cohort,
    data = data_cvd
  ),

  m2 = coxph(
    Surv(risk_time_art_10yrs, risk_art_flag_10yrs) ~
      treated +
        birth_cohort +
        Age +
        Sex +
        comorbidity +
        cvd_art_before_HPA_flag,
    data = data_cvd
  ),

  m3 = coxph(
    Surv(risk_time_art_10yrs, risk_art_flag_10yrs) ~
      treated +
        birth_cohort +
        Age +
        Sex +
        comorbidity +
        cvd_art_before_HPA_flag +
        IncomeLevel_CSFVI,
    data = data_cvd
  ),

  m4 = coxph(
    Surv(risk_time_art_10yrs, risk_art_flag_10yrs) ~
      treated +
        ssyk_WBHL_group +
        birth_cohort +
        Age +
        Sex +
        comorbidity +
        cvd_art_before_HPA_flag +
        IncomeLevel_CSFVI,
    data = data_occ
  ),

  m5 = coxph(
    Surv(risk_time_art_10yrs, risk_art_flag_10yrs) ~
      treated +
        birth_cohort +
        Age +
        Sex +
        comorbidity +
        cvd_art_before_HPA_flag +
        IncomeLevel_CSFVI +
        ssyk_WBHL_group +
        KommunSize +
        Place_of_origin,
    data = data_mun
  ),

  m6 = coxph(
    Surv(risk_time_art_10yrs, risk_art_flag_10yrs) ~
      treated *
        Sex +
        birth_cohort +
        Age +
        comorbidity +
        cvd_art_before_HPA_flag +
        IncomeLevel_CSFVI,
    data = data_cvd
  ),

  m7 = coxph(
    Surv(risk_time_art_10yrs, risk_art_flag_10yrs) ~
      treated *
        age_group +
        Sex +
        birth_cohort +
        comorbidity +
        cvd_art_before_HPA_flag +
        IncomeLevel_CSFVI,
    data = data_cvd
  ),

  m8 = coxph(
    Surv(risk_time_art_10yrs, risk_art_flag_10yrs) ~
      treated *
        ssyk_WBHL_group +
        birth_cohort +
        Age +
        Sex +
        comorbidity +
        cvd_art_before_HPA_flag +
        IncomeLevel_CSFVI,
    data = data_occ
  ),

  m9 = coxph(
    Surv(risk_time_art_10yrs, risk_art_flag_10yrs) ~
      treated *
        IncomeLevel_CSFVI +
        birth_cohort +
        Age +
        Sex +
        comorbidity +
        cvd_art_before_HPA_flag,
    data = data_cvd
  ),

  m10 = coxph(
    Surv(risk_time_art_10yrs, risk_art_flag_10yrs) ~
      treated *
        n_tests_within_5_fac_vs_ctrl +
        Age +
        Sex +
        birth_cohort +
        comorbidity +
        cvd_art_before_HPA_flag +
        IncomeLevel_CSFVI,
    data = data_cvd
  ),

  m11 = coxph(
    Surv(risk_time_art_10yrs, risk_art_flag_10yrs) ~
      treated *
        EducationLevel +
        birth_cohort +
        Age +
        Sex +
        comorbidity +
        cvd_art_before_HPA_flag,
    data = data_cvd
  ),

  m12 = coxph(
    Surv(risk_time_art_10yrs, risk_art_flag_10yrs) ~
      treated *
        SSYK +
        birth_cohort +
        Age +
        Sex +
        comorbidity +
        cvd_art_before_HPA_flag,
    data = data_occ
  )
)
```

## get estimates for the main models (M1–M5) and interactions (M6–M8)
```{r}
# ───────────────────────────────────────────────────────────────────────────────
# helper that works for by_var = NULL (main models) or a grouping variable    |
# ───────────────────────────────────────────────────────────────────────────────
get_hr <- function(fit, model_id, by_var = NULL) {
  # 1) get the avg hazard ratio row
  hr <- avg_comparisons(
    fit,
    variables = "treated",
    by = by_var, # NULL → one row, change to TRUE for main model estimates
    type = "lp",
    transform = "exp"
  ) |>
    as_tibble() |> # collapse comparisons object to tibble
    mutate(model = model_id, .before = 1)

  # 2) extract the exact analysis data
  mf <- model.frame(fit)
  status <- mf[[1]][, "status"]
  dat <- mf |>
    mutate(
      event = status,
      arm = if_else(treated %in% c(1, "HPA"), "HPA", "Control")
    )

  # 3) count by (by_var + arm) or by arm alone
  grp_vars <- if (is.null(by_var)) "arm" else c(by_var, "arm")

  counts <- dat |>
    group_by(across(all_of(grp_vars))) |>
    summarise(
      n = n(),
      events = sum(event),
      .groups = "drop"
    ) |>
    pivot_wider(
      names_from = arm,
      values_from = c(n, events),
      names_glue = "{.value}_{arm}"
    )

  # 4) merge: for by_var = NULL, we know hr has exactly one row → use bind_cols()
  if (is.null(by_var)) {
    bind_cols(hr, counts)
  } else {
    left_join(hr, counts, by = by_var)
  }
}


# ───────────────────────────────────────────────────────────────────────────────
# build the main‐effects table (M1–M5), now with n_Control, events_Control, etc. |
# ───────────────────────────────────────────────────────────────────────────────
tbl_main <- imap_dfr(
  fits_m[1:5], # M1–M5
  \(fit, nm) get_hr(fit, nm)
)

# ───────────────────────────────────────────────────────────────────────────────
# build the interaction tables (M6–M8)                                          |
# ───────────────────────────────────────────────────────────────────────────────
tbl_int <- bind_rows(
  get_hr(fits_m$m6, "M6", by_var = "Sex"),
  get_hr(fits_m$m7, "M7", by_var = "age_group"),
  get_hr(fits_m$m8, "M8", by_var = "ssyk_WBHL_group")
)

# ───────────────────────────────────────────────────────────────────────────────
# finally, stack them                                                           |
# ───────────────────────────────────────────────────────────────────────────────
hr_combined <- bind_rows(tbl_main, tbl_int) |>
  select(
    model,
    n_Control,
    events_Control,
    n_HPA,
    events_HPA,
    term,
    contrast,
    estimate,
    conf.low,
    conf.high,
    p.value
  )

print(hr_combined, n = nrow(hr_combined))

```

```{r}

hr_main <- hr_tbl |>
  as_tibble() |>
  mutate(
    exposure = model, # M1, M2, …, M8
    groups = "All" # no strata for main-effects
  ) |>
  select(
    exposure,
    groups,
    n_Control,
    n_HPA,
    events_Control,
    events_HPA,
    term,
    contrast,
    estimate,
    conf.low,
    conf.high,
    p.value
  )


hr_exp <- hr_tbl_all_df


hr_combined <- bind_rows(hr_main, hr_exp)


print(hr_combined, n = nrow(hr_combined))
```



# _______________________________________________________________________________



# Flexsurv models, 10 yr risk

Not used in the final version of the manuscript.

```{r}

# ---------- Data where missing covariates ---------------------------------

data_occ <- data_cvd |>
  filter(!is.na(ssyk_WBHL_group)) |>
  group_by(id_cluster) |>
  mutate(n_cluster = n()) |>
  ungroup() |>
  filter(n_cluster > 4)

data_mun <- data_cvd |>
  filter(
    !is.na(ssyk_WBHL_group),
    !is.na(KommunSize),
    !is.na(Place_of_origin)
  ) |>
  group_by(id_cluster) |>
  mutate(n_cluster = n()) |>
  ungroup() |>
  filter(n_cluster > 4)


dist_k <- 2

fspline <- function(
  rhs,
  risk_time = "risk_time_art_10yrs",
  event = "risk_art_flag_10yrs",
  data,
  k = dist_k,
  scale = "hazard"
) {
  # turn the character names into symbols
  rt_sym <- as.name(risk_time)
  ev_sym <- as.name(event)

  # build Surv(time, status) ~ <rhs>
  fml <- as.formula(
    substitute(
      Surv(rt, ev) ~ RHS,
      list(rt = rt_sym, ev = ev_sym, RHS = rhs[[2]]) # pull the RHS of the model formula you pass in
    )
  )

  flexsurvspline(
    formula = fml,
    data = data,
    k = k,
    scale = scale
  )
}


```


```{r}
# ----------------------------------------------------------------------
# create an empty list that we will fill
# ----------------------------------------------------------------------
models <- list()

# ----------------------------------------------------------------------
#  M1  ──────────────────────────────────────────────────────────────────
# ----------------------------------------------------------------------
tic("M1")
models[["M1: treated + cohort"]] <-
  tryCatch(
    fspline(rhs = treated + birth_cohort, data = data_cvd),
    error = function(e) {
      message("  M1 failed: ", e$message)
      NULL
    }
  )
toc()

# ----------------------------------------------------------------------
#  M2  ──────────────────────────────────────────────────────────────────
# ----------------------------------------------------------------------
tic("M2")
models[["M2: + age sex comorb pre-CVD"]] <-
  tryCatch(
    fspline(
      treated +
        birth_cohort +
        Age +
        Sex +
        comorbidity +
        cvd_art_before_HPA_flag,
      data = data_cvd
    ),
    error = function(e) {
      message("  M2 failed: ", e$message)
      NULL
    }
  )
toc()

# ----------------------------------------------------------------------
#  M3  ──────────────────────────────────────────────────────────────────
# ----------------------------------------------------------------------
tic("M3")
models[["M3: + income"]] <-
  tryCatch(
    fspline(
      treated +
        birth_cohort +
        Age +
        Sex +
        comorbidity +
        cvd_art_before_HPA_flag +
        IncomeLevel_CSFVI,
      data = data_cvd
    ),
    error = function(e) {
      message("  M3 failed: ", e$message)
      NULL
    }
  )
toc()

# ----------------------------------------------------------------------
#  M4  ──────────────────────────────────────────────────────────────────
# ----------------------------------------------------------------------
tic("M4")
models[["M4: + Occupation"]] <-
  tryCatch(
    fspline(
      ~ treated +
        birth_cohort +
        Age +
        Sex +
        comorbidity +
        cvd_art_before_HPA_flag +
        IncomeLevel_CSFVI +
        ssyk_WBHL_group,
      data = data_occ
    ), # <- subset where occupation is complete
    error = function(e) {
      message("  M4 failed: ", e$message)
      NULL
    }
  )
toc()

# ----------------------------------------------------------------------
#  M5  ──────────────────────────────────────────────────────────────────
# ----------------------------------------------------------------------
tic("M5")
models[["M5: + municipality & origin"]] <-
  tryCatch(
    fspline(
      ~ treated +
        birth_cohort +
        Age +
        Sex +
        comorbidity +
        cvd_art_before_HPA_flag +
        IncomeLevel_CSFVI +
        ssyk_WBHL_group +
        KommunSize +
        Place_of_origin,
      data = data_mun
    ), # subset with both vars observed
    error = function(e) {
      message("  M5 failed: ", e$message)
      NULL
    }
  )
toc()

# ----------------------------------------------------------------------
#  M6  ──────────────────────────────────────────────────────────────────
# ----------------------------------------------------------------------
tic("M6")
models[["M6: M3 × sex"]] <-
  tryCatch(
    fspline(
      ~ treated *
        Sex +
        birth_cohort +
        Age +
        comorbidity +
        cvd_art_before_HPA_flag +
        IncomeLevel_CSFVI,
      data = data_cvd
    ),
    error = function(e) {
      message("  M6 failed: ", e$message)
      NULL
    }
  )
toc()

# ----------------------------------------------------------------------
#  M7  ──────────────────────────────────────────────────────────────────
# ----------------------------------------------------------------------
tic("M7")
models[["M7: M3 × age"]] <-
  tryCatch(
    fspline(
      ~ treated *
        Age +
        Sex +
        birth_cohort +
        comorbidity +
        cvd_art_before_HPA_flag +
        IncomeLevel_CSFVI,
      data = data_cvd
    ),
    error = function(e) {
      message("  M7 failed: ", e$message)
      NULL
    }
  )
toc()

tic("M7")
models[["M7: M3 × age"]] <-
  tryCatch(
    fspline(
      ~ treated *
        age_group +
        Sex +
        birth_cohort +
        comorbidity +
        cvd_art_before_HPA_flag +
        IncomeLevel_CSFVI,
      data = data_cvd
    ),
    error = function(e) {
      message("  M7 failed: ", e$message)
      NULL
    }
  )
toc()

# ----------------------------------------------------------------------
#  M8  ──────────────────────────────────────────────────────────────────
# ----------------------------------------------------------------------
tic("M8")
models[["M8: M3 × occupation"]] <-
  tryCatch(
    fspline(
      ~ treated *
        ssyk_WBHL_group +
        birth_cohort +
        Age +
        Sex +
        comorbidity +
        cvd_art_before_HPA_flag +
        IncomeLevel_CSFVI,
      data = data_occ
    ),
    error = function(e) {
      message("  M8 failed: ", e$message)
      NULL
    }
  )
toc()

# ----------------------------------------------------------------------
#  M9  ─────────────────────────────────────────────────────────────────-
# ----------------------------------------------------------------------
tic("M9")
models[["M9: Number of HPAs + covariates in M3"]] <-
  tryCatch(
    fspline(
      ~ n_tests_within_5_fac +
        Age +
        Sex +
        birth_cohort +
        comorbidity +
        cvd_art_before_HPA_flag +
        IncomeLevel_CSFVI,
      data = data_cvd
    ),
    error = function(e) {
      message("  M9 failed: ", e$message)
      NULL
    }
  )
toc()

tic("M10")
models[["M10: Number of HPAs + covariates in M3, 5yrs"]] <-
  tryCatch(
    fspline(
      ~ n_tests_within_5_fac +
        Age +
        Sex +
        birth_cohort +
        comorbidity +
        cvd_art_before_HPA_flag +
        IncomeLevel_CSFVI,
      data = data_cvd
    ),
    error = function(e) {
      message("  M9 failed: ", e$message)
      NULL
    }
  )
toc()

```



## Save models

```{r}

# 10 year
saveRDS(models, here::here("..", "results", "models", "FPS_10yr_models.rds"))

# five year
# saveRDS(models, here::here("..", "results", "models", "FPS_models.rds"))
models <- readRDS(here::here("..", "results", "models", "FPS_10yr_models.rds"))
```


# _____________________________________________________________________________
